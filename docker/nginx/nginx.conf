worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Настройки логов
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # --- Rate Limiting ---
    # 10 запросов в секунду с одного IP. Зона 10Мб для хранения IP.
    limit_req_zone $binary_remote_addr zone=apilimit:10m rate=10r/s;

    # Настройки проксирования
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Увеличение таймаутов (если нужны большие загрузки/ответы)
    # proxy_connect_timeout       600;
    # proxy_send_timeout          600;
    # proxy_read_timeout          600;
    # send_timeout                600;
    # client_max_body_size        100M; # Если нужны большие загрузки файлов

    # Определяем upstream для нашего FastAPI приложения
    upstream backend {
        # Имя сервиса из docker-compose.yml и порт, который слушает FastAPI
        server web:8000;
    }

    # --- HTTP Server (Редирект на HTTPS) ---
    server {
        listen 80; # Слушаем порт 80
        server_name localhost;

        # Добавляем security headers и для HTTP -> HTTPS редиректа
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # add_header Content-Security-Policy "default-src 'self'" always; # CSP - раскомментировать и настроить при необходимости

        # Редиректим весь HTTP трафик на HTTPS
        location / {
            return 301 https://$host:8443$request_uri;
        }
    }

    # --- HTTPS Server ---
    server {
        listen 443 ssl http2; # Слушаем порт 443 с SSL и HTTP/2
        server_name localhost;

        # --- SSL Configuration ---
        ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt; # Путь к сертификату внутри контейнера
        ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key; # Путь к ключу внутри контейнера

        # Настройки SSL (примерные, можно использовать генераторы типа Mozilla SSL Config Generator)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        # --- Security Headers ---
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always; # Пример CSP (настроить под фронтенд!)
        # HSTS (Включать только когда HTTPS работает стабильно!)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # === Обработка локаций ===

        # Раздача статических медиафайлов
        location /media/ {
            alias /var/www/media/; # Путь внутри Nginx контейнера, куда будет смонтирован том
            # Дополнительные настройки для статики (кэширование и т.д. - опционально)
            # expires 1d;
            # add_header Cache-Control "public";
        }

        # Проксирование API запросов (/api/) на бэкенд FastAPI
        location /api/ {
            limit_req zone=apilimit burst=20 nodelay;
            proxy_pass http://backend;
        }

        # Проксирование документации API (/docs, /redoc, /openapi.json) на бэкенд FastAPI
        location /docs {
            limit_req zone=apilimit burst=20 nodelay;
            proxy_pass http://backend/docs;
        }
        location /openapi.json {
            limit_req zone=apilimit burst=20 nodelay;
            proxy_pass http://backend/openapi.json;
        }
        location /redoc {
            limit_req zone=apilimit burst=20 nodelay;
            proxy_pass http://backend/redoc;
        }

        # Проксирование для Prometheus Metrics
        location = /metrics {
            # Можно применить лимит, если нужно ограничить доступ к метрикам
            # limit_req zone=apilimit burst=5 nodelay;
            proxy_pass http://backend/metrics;
        }

        # Раздача статики ФРОНТЕНДА (корневой путь и все остальное)
        location / {
            root /var/www/frontend; # Путь к статике фронтенда внутри контейнера Nginx
            # Стандартная обработка для SPA или статических сайтов
            # Пытается найти файл, потом директорию, потом отдает index.html
            # Это важно для работы роутинга во фронтенд-фреймворках (React, Vue, Angular)
            try_files $uri $uri/ /index.html;
        }
    }
}
