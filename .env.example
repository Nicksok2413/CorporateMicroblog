# Шаблон переменных окружения для сервиса микроблогов
# Скопируйте этот файл в .env и заполните значениями

# -- Настройки PostgreSQL --
# Используются для сборки DATABASE_URL
POSTGRES_USER=microblog_user
POSTGRES_PASSWORD=secure_password_CHANGE_ME
POSTGRES_DB=microblog_db
POSTGRES_HOST=db # Имя сервиса postgres в docker-compose.yml
POSTGRES_PORT=5432

# -- Настройки приложения --
# Название приложения
PROJECT_NAME="Microblog Service"
# Версия приложения
API_VERSION="1.0.0"
# ? Префикс v1 роутера ?
API_V1_STR="/v1"
# Режим отладки (True/False). В production должно быть False.
DEBUG=False
# Режим тестирования (True/False). Автоматически установится в True при запуске через pytest.ini
TESTING=False
# Режим продакшен (True/False). Если DEBUG=False и TESTING=False, то считается PRODUCTION=True
PRODUCTION=True

# -- Настройки безопасности --
# Используется FastAPI для внутренних нужд, подписи сессий/кук (если будут)
# Сгенерируйте надежный ключ, например, с помощью: openssl rand -hex 32
SECRET_KEY=your_super_secret_32_character_long_key_CHANGE_ME
# Заголовок для передачи API ключа клиента
API_KEY_HEADER=api-key

# -- Настройки медиа --
# Путь к директории медиа ВНУТРИ контейнера/приложения
STORAGE_PATH=/app/static/media
# Префикс URL для доступа к медиафайлам через статику FastAPI/Nginx
MEDIA_URL_PREFIX=/static/media

# -- Настройки логирования --
# Уровни: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO
# Путь к файлу логов (опционально). Если не указан, в production будет logs/app.log
# LOG_FILE=logs/app.log

# -- URL тестовой БД (используется, если TESTING=True) --
# Асинхронный SQLite по умолчанию
TEST_DB_URL=sqlite+aiosqlite:///./test.db
# Или можно использовать отдельную тестовую БД Postgres:
# TEST_DB_URL=postgresql+asyncpg://test_user:test_pass@db:5432/test_db