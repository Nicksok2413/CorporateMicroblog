name: Microblog CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Lint, Type Check, Audit & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip' # Кэшируем зависимости pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Lint with Ruff
        run: |
          ruff check .
          ruff format . --check # Проверяем форматирование без изменения файлов
      - name: Check types with Mypy
        run: mypy src

      - name: Audit dependencies with pip-audit # Аудит зависимостей
        run: pip-audit

      - name: Run tests with Pytest
        run: pytest --cov=src --cov-report term-missing -vv
        env:
          # Переменные для тестов
          TESTING: True # Гарантирует использование SQLite и временных папок для тестов
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb

  build_and_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test # Запускаем только если job 'test' прошел успешно
    # Запускаем этот job только при push в main или dev, НЕ для PR
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    permissions:
      contents: read # Нужно для checkout
      packages: write # Нужно для пуша в GitHub Container Registry (GHCR)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Имя пользователя GitHub
          password: ${{ secrets.GITHUB_TOKEN }} # Автоматически предоставляемый токен

      - name: Extract metadata (tags, labels) for Docker
        id: meta # ID шага для ссылки на его outputs
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # Имя образа: ghcr.io/YOUR_USERNAME/YOUR_REPO
          # Генерируем теги:
          # - 'latest' для main ветки
          # - имя ветки для других веток (здесь 'dev')
          # - Git SHA для всех событий push
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=,suffix=,event=push
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Контекст сборки - корень репозитория
          file: ./docker/web/Dockerfile # Указываем путь к Dockerfile для web сервиса
          push: true # Пушим образ в регистр
          tags: ${{ steps.meta.outputs.tags }} # Используем теги из шага meta
          labels: ${{ steps.meta.outputs.labels }} # Добавляем стандартные метки
          cache-from: type=gha # Используем кэш GitHub Actions
          cache-to: type=gha,mode=max # Сохраняем кэш
