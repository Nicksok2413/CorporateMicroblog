[alembic]
# Путь к директории с миграциями относительно этого файла
script_location = migrations

# Шаблон имени файла для новых миграций
# Доступные переменные: %(rev)s, %(slug)s, %(year)d, %(month).2d, %(day).2d, %(hour).2d, %(minute).2d, %(second).2d
file_template = %%(rev)s_%%(slug)s

# Кодировка файлов миграций
# encoding = utf-8

# URL для подключения к базе данных.
# Alembic будет использовать эту переменную.
# Рекомендуется использовать переменную окружения.
# Замените ее на ваш реальный URL или используйте переменную окружения
# sqlalchemy.url = postgresql://user:password@host:port/database
# Используем переменную окружения DATABASE_URL_ALEMBIC (или просто DATABASE_URL, если он подходит)
# Важно: Alembic по умолчанию работает СИНХРОННО, поэтому URL должен быть для синхронного драйвера (psycopg2)!
# Наш env.py адаптирует его для асинхронной проверки, но для самого Alembic нужен синхронный.
# Создадим переменную окружения для Alembic в .env
sqlalchemy.url = postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}


[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S

```for env.py

# --- Загрузка .env ---
from dotenv import load_dotenv
# # Ищем .env на один уровень выше папки alembic (в корне проекта)
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
if os.path.exists(dotenv_path):
    print(f"Loading environment variables from: {dotenv_path}")
    load_dotenv(dotenv_path=dotenv_path)
else:
    print(f".env file not found at: {dotenv_path}. Relying on existing environment variables.")

# # Добавляем корень проекта в sys.path, чтобы найти src.*
sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(__file__), "..")))

    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True, # !
    )
```
