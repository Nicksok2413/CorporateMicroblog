services:
  db:
    image: postgres:17-alpine
    container_name: microblog_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ] # Экранируем $ для shell
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s # Даем время на запуск Postgres перед первой проверкой
    restart: unless-stopped
    networks:
      - microblog_network

  media-initializer:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: docker/media_init/Dockerfile # Путь к Dockerfile инициализатора медиа
    container_name: microblog_media_init
    volumes:
      # Монтируем том для медиа-файлов
      - media_data:/target_media_volume
    # Копируем все из /init_media (внутри образа) в смонтированный том /target_media_volume
    # Ключ -n: не перезаписывать существующие файлы (важно для повторных запусков)
    command: sh -c 'cp -rn /init_media/* /target_media_volume/ && echo "Initial media copied." || echo "Initial media already exists or error."'
    networks: # Сеть не обязательна, но пусть будет для консистентности
      - microblog_network

  web:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: docker/web/Dockerfile # Путь к Dockerfile для web
    container_name: microblog_web
    env_file:
      - .env
    volumes:
      - media_data:/media # Том для медиа-файлов
      - log_data:/logs # Том для логов
    expose:
      # Открываем порт только внутри сети Docker
      - "8000"
    depends_on:
      db:
        condition: service_healthy # Запускаем web только после того, как db станет healthy
      media-initializer:
        condition: service_completed_successfully # Запускаем после успешного завершения инициализатора медиа
    restart: unless-stopped
    networks:
      - microblog_network

  nginx:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: docker/nginx/Dockerfile # Путь к Dockerfile для nginx
    container_name: microblog_nginx
    volumes:
      # Монтируем том для медиа-файлов (только для чтения)
      - media_data:/var/www/media:ro
      # Монтируем папку с сертификатами (только для чтения)
      - ./docker/nginx/certs:/etc/nginx/certs:ro
      # Монтируем том для логов Nginx
      - nginx_log_data:/var/log/nginx
    ports:
      # Внешний HTTP порт 8000 хоста пробрасываем на порт 80 контейнера Nginx (для редиректа)
      - "8000:80"
      # Внешний HTTPS порт 8443 хоста пробрасываем на порт 443 контейнера Nginx
      - "8443:443"
    depends_on:
      - web # Запускаем Nginx после web
    restart: unless-stopped
    networks:
      - microblog_network

volumes:
  postgres_data:
    driver: local
  media_data:
    driver: local
  log_data:
    driver: local
  nginx_log_data:
    driver: local

networks:
  microblog_network:
    driver: bridge