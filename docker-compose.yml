services:
  # Сервис базы данных PostgreSQL
  db:
    image: postgres:17-alpine # Используем легковесный образ
    container_name: microblog_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Volume для сохранения данных БД
    env_file:
      - .env # Загружаем переменные из .env (POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB)
    expose:
      - "5432" # Открываем порт только внутри сети Docker
    ports: # Если нужен доступ к БД с хост-машины
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"] # Экранируем $ для shell
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Сервис приложения FastAPI
  web:
    build: . # Собираем образ из Dockerfile в текущей директории
    container_name: microblog_web
    volumes:
      # Монтируем код для live reload (удобно для разработки, можно убрать для чистого production)
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      # Volume для сохранения загруженных медиафайлов
      - media_data:/app/static/media
    ports:
      - "8000:8000" # Пробрасываем порт 8000 контейнера на порт 8000 хоста
    env_file:
      - .env # Передаем все переменные окружения из .env в приложение
    depends_on:
      db:
        condition: service_healthy # Запускаем web только после того, как db станет 'healthy'
    restart: unless-stopped

# Определяем именованные volumes
volumes:
  postgres_data: # Данные PostgreSQL
  media_data:    # Медиафайлы приложения